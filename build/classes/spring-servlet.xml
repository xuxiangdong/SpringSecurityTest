<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation=" http://www.springframework.org/schema/tx 
			   http://www.springframework.org/schema/tx/spring-tx.xsd
               http://www.springframework.org/schema/beans 
               http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
               http://www.springframework.org/schema/context 
               http://www.springframework.org/schema/context/spring-context-3.1.xsd 
               http://www.springframework.org/schema/mvc 
               http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">
    <!-- 开启注解配置 -->  
    <context:annotation-config />  
	<!-- 启动注解驱动的Spring MVC功能，注册请求url和注解POJO类方法的映射 -->
	<mvc:annotation-driven />
	<!-- 启动包扫描功能，以便注册带有@Controller、@Service、@repository、@Component等注解的类成为spring的bean -->
	<!-- 这个包根据自己的项目来配置，我的是com.stsoft，本配置所在文件在web.xml中的位置最好在context-param中初始化，而不要放在contextConfigLocation中初始化，否则在springsecurity中无法使用自动装配 -->
	<context:component-scan base-package="com.stsoft" />  
	<mvc:resources mapping="/resources/**" location="/WEB-INF/resources/" />
	<!-- <context:property-placeholder location="classpath:db.properties" /> -->
	


	<bean id="freemarkerConfig"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath" value="/WEB-INF/ftl"></property>
		<property name="freemarkerSettings">
			<props>
				<prop key="template_update_delay">5</prop>
				<prop key="default_encoding">UTF-8</prop>
				<prop key="url_escaping_charset">UTF-8</prop>
				<prop key="locale">zh_CN</prop>
				<prop key="boolean_format">true,false</prop>
				<prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
				<prop key="time_format">HH:mm:ss</prop>
				<prop key="number_format">0.######</prop>
				<prop key="whitespace_stripping">true</prop>
			</props>
		</property>
		<property name="freemarkerVariables">
			<map>
				<entry key="xml_escape" value-ref="fmXmlEscape" />
				<!--下面四个是在下面定义的 -->
				<entry key="extends" value-ref="extendsDirective" />
				<entry key="override" value-ref="overrideDirective" />
				<entry key="block" value-ref="blockDirective" />
				<entry key="super" value-ref="superDirective" />
			</map>
		</property>
	</bean>
	 <bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape" />  
	<bean id="blockDirective"
		class="cn.org.rapid_framework.freemarker.directive.BlockDirective" />
	<bean id="extendsDirective"
		class="cn.org.rapid_framework.freemarker.directive.ExtendsDirective" />
	<bean id="overrideDirective"
		class="cn.org.rapid_framework.freemarker.directive.OverrideDirective" />
	<bean id="superDirective"
		class="cn.org.rapid_framework.freemarker.directive.SuperDirective" />
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="cache" value="true"></property>
		<property name="viewClass"
			value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"></property>
		<property name="suffix" value=".ftl"></property>
		<property name="exposeSpringMacroHelpers" value="true"></property>
		<property name="exposeRequestAttributes" value="true"></property>
		<property name="requestContextAttribute" value="rc"></property>
		<property name="contentType" value="text/html;charset=UTF-8"></property>
	</bean>
	<!-- 对模型视图名称的解析，在请求时模型视图名称添加前后缀 -->
	<!-- <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> 
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" 
		/> <property name="prefix" value="/WEB-INF/jsp/" /> <property name="suffix" 
		value=".jsp" /> </bean> -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />
	<!-- spring 数据传递过程中对json数据支持 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" >
		<property name="messageConverters">
			<list>
				<ref bean="jsonHttpMessageConverter" />
			</list>
		</property>
	</bean>
	<bean id="jsonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" >
		<property name="supportedMediaTypes">
			<list>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	 <!-- ========================================针对myBatis的配置项============================== -->
    <!-- 配置sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描com.stsoft.mapping/目录下的所有SQL映射的xml文件, 省掉Configuration.xml里的手工配置
        value="com/stsoft/mapping/*.xml"指的是classpath(类路径)下com.stsoft.mapping包中的所有xml文件
        UserMapper.xml位于com.stsoft.mapping包下，这样UserMapper.xml就可以被自动扫描
         -->
        <property name="mapperLocations" value="classpath:com/stsoft/mapping/*.xml" />
        <!-- mybatis分页相关配置 -->
         <property name="plugins">
		    <array>
		      <bean class="com.github.pagehelper.PageHelper">
		        <property name="properties">
		          <value>
		            dialect=mysql
		          </value>
		        </property>
		      </bean>
		    </array>
		  </property>
    </bean>
    <!-- 配置扫描器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描com.stsoft.dao这个包以及它的子包下的所有映射接口类 -->
        <property name="basePackage" value="com.stsoft.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>
    
    <!-- ========================================分隔线========================================= -->
    <!-- 配置Spring的事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager" />
    <!-- 异常处理类 -->
    <bean id="exceptionResolver" class="com.stsoft.spring.HandlerExceptionResolverImpl" />
</beans> 